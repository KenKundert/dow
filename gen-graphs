#!/usr/bin/env python3
"""Show Stock Market Indicies Normalized to Gold

usage:
    gen-graphs [options]

options:
    -d, --dollars   show indices and gold in dollars
    -g, --gold      show indices normalized to gold
    -n, --no-graph  save the graphs as svg file rather than display them
"""

# Imports {{{1
import nestedtext as nt
from inform import fatal, os_error
from quantiphy import Quantity
from docopt import docopt
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

# Globals {{{1
data = dict(
    dow = dict(name='Dow', color='blue'),
    gold = dict(name='Gold', color='orange'),
    sp500 = dict(name='S&P 500', color='green'),
    nasdaq = dict(name='Nasdaq', color='magenta'),
)
normalized = dict(
    dow = dict(name='Dow', color='blue'),
    gold = dict(name='Gold', color='orange'),
    sp500 = dict(name='S&P 500', color='green'),
    nasdaq = dict(name='Nasdaq', color='magenta'),
)

# Read command line {{{1
cmdline = docopt(__doc__)
display_results = not cmdline['--no-graph']
show_in_dollars = cmdline['--dollars']
show_in_gold = cmdline['--gold']
if not show_in_dollars and not show_in_gold:
    show_in_dollars = show_in_gold = True


# Read prices {{{1
try:
    raw_data = nt.load('prices.nt')
except nt.NestedTextError as e:
    e.terminate()
except OSError as e:
    fatal(os_error(e))

# Filter out all but the most recent results in each year {{{1
first_year = 3000
for each in raw_data:
    prices = {
        int(k.split('-')[0]): Quantity(v, '$')
        for k, v in raw_data[each]['prices'].items()
    }
    first = next(iter(prices.keys()))
    if first < first_year:
        first_year = first
    data[each]['data'] = prices

# Calculate normalized prices {{{1
for each in data:
    prices = {
        y: data[each]['data'][y]/data['gold']['data'][y]
        for y in range(first_year, 2021)
        if y in data[each]['data'] and y in data['gold']['data']
    }
    normalized[each]['data'] = prices

# Compute growth rate {{{1
# non-normalized data {{{2
# use a semi-log regression
for each in data:
    years = list(data[each]['data'].keys())
    prices = list(data[each]['data'].values())
    slope, offset = np.polyfit(years, np.log10(prices), 1)
    fit_prices = 10**np.polyval([slope, offset], years)
    rate = 10**slope - 1
    range = f"{years[0]} — {years[-1]}"
    name = data[each]['name']
    print(f"Average Growth Rate of {name} ({range})) = {rate:.2%}")
    data[each]['rate'] = rate
    data[each]['range'] = range
    data[each]['years'] = years
    data[each]['prices'] = prices
    data[each]['fit'] = fit_prices

# normalized data {{{2
# use a semi-log regression
for each in normalized:
    years = list(normalized[each]['data'].keys())
    prices = list(normalized[each]['data'].values())
    slope, offset = np.polyfit(years, np.log10(prices), 1)
    fit_prices = 10**np.polyval([slope, offset], years)
    rate = 10**slope - 1
    range = f"{years[0]} — {years[-1]}"
    name = normalized[each]['name']
    print(f"Average Growth Rate of {name} Normalized to Gold ({range})) = {rate:.2%}.")
    normalized[each]['rate'] = rate
    normalized[each]['range'] = range
    normalized[each]['years'] = years
    normalized[each]['prices'] = prices
    normalized[each]['fit'] = fit_prices

# generate graphs {{{1
# generate graph of price in dollars {{{2
if show_in_dollars:
    if display_results:
        figure = plt.figure()
        axis = figure.add_subplot(111)
        axis.set(
            xlabel = 'year',
            ylabel = 'price',
            title = 'Prices in Dollars'
        )
    for each in data:
        name = data[each]['name']
        if not display_results:
            figure = plt.figure()
            axis = figure.add_subplot(111)
            axis.set(
                xlabel = 'year',
                ylabel = 'price',
                title = f"Price of {name} in Dollars"
            )
        fit_label = f"{name} growth = {data[each]['rate']:.2%}"
        axis.plot(
            data[each]['years'],
            data[each]['prices'],
            label = data[each]['name'],
            color = data[each]['color'],
            linestyle = 'solid',
        )
        axis.plot(
            data[each]['years'],
            data[each]['fit'],
            label = fit_label,
            color = data[each]['color'],
            linestyle = 'dotted',
        )
        if not display_results:
            axis.set_yscale('log')
            axis.yaxis.set_major_formatter(
                ticker.FuncFormatter(lambda v, p: Quantity(v, '$').render())
            )
            axis.legend()
            figure.savefig(each + '_usd.svg')

    if display_results:
        axis.set_yscale('log')
        axis.yaxis.set_major_formatter(
            ticker.FuncFormatter(lambda v, p: Quantity(v, '$').render())
        )
        axis.legend()
        plt.show()

# generate graph of price normalized to gold {{{2
if show_in_gold:
    if display_results:
        figure = plt.figure()
        axis = figure.add_subplot(111)
        axis.set(
            xlabel = 'year',
            ylabel = 'price',
            title = 'Prices in Ounces of Gold'
        )
    for each in normalized:
        if each == 'gold':
            continue
        name = data[each]['name']
        if not display_results:
            figure = plt.figure()
            axis = figure.add_subplot(111)
            axis.set(
                xlabel = 'year',
                ylabel = 'price',
                title = f"Price of {name} in Ounces of Gold"
            )
        fit_label = f"{normalized[each]['name']} growth = {normalized[each]['rate']:.2%}"
        axis.plot(
            normalized[each]['years'],
            normalized[each]['prices'],
            label = normalized[each]['name'],
            color = normalized[each]['color'],
            linestyle = 'solid',
        )
        axis.plot(
            normalized[each]['years'],
            normalized[each]['fit'],
            label = fit_label,
            color = normalized[each]['color'],
            linestyle = 'dotted',
        )
        if not display_results:
            axis.set_yscale('log')
            axis.yaxis.set_major_formatter(
                ticker.FuncFormatter(lambda v, p: Quantity(v, '$').render())
            )
            axis.legend()
            figure.savefig(each + '_auoz.svg')

    if display_results:
        axis.set_yscale('log')
        axis.yaxis.set_major_formatter(ticker.FuncFormatter(lambda y, _: '{:g}'.format(y)))
        axis.legend()
        plt.show()
