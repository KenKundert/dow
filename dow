#!/usr/bin/env python3
"""Show Dow-Jones Industrial Average Normalized to Gold

usage:
    dow [options]

options:
    -d, --dollars   show Dow and gold in dollars
    -g, --gold      show Dow normalized to gold
    -n, --no-graph  save the graphs as svg file rather than display them
"""

# Imports {{{1
import nestedtext as nt
from inform import fatal, os_error
from quantiphy import Quantity
from docopt import docopt
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

# Read command line {{{1
cmdline = docopt(__doc__)
display_results = not cmdline['--no-graph']
show_in_dollars = cmdline['--dollars']
show_in_gold = cmdline['--gold']
if not show_in_dollars and not show_in_gold:
    show_in_dollars = show_in_gold = True


# Read prices {{{1
try:
    prices = nt.load('prices.nt')
except nt.NestedTextError as e:
    e.terminate()
except OSError as e:
    fatal(os_error(e))

# Convert prices from text to numbers {{{1
gold_year = []
gold_price = []
dow_year = []
dow_price = []
ratio_year = []
ratio_price = []
for year in range(1750, 2050):
    year_as_str = str(year)
    in_both = True
    if year_as_str in prices['gold']['prices']:
        gold = Quantity(prices['gold']['prices'][year_as_str], '$')
        gold_year.append(year)
        gold_price.append(gold)
    else:
        in_both = False

    if year_as_str in prices['dow']['prices']:
        dow = Quantity(prices['dow']['prices'][year_as_str], '$')
        dow_year.append(year)
        dow_price.append(dow)
    else:
        in_both = False

    if in_both:
        ratio_year.append(year)
        ratio_price.append(dow/gold)

# compute growth rate {{{1
# perform a semi-log regression on ratio
slope, offset = np.polyfit(ratio_year, np.log10(ratio_price), 1)
rate = 10**slope - 1
print(f'Average Growth Rate of Dow/Gold = {rate:.2%}.')
best_fit = 10**np.polyval([slope, offset], ratio_year)

# generate graphs {{{1
# generate graph of price in dollars {{{2
if show_in_dollars:
    figure = plt.figure()
    axis = figure.add_subplot(111)
    axis.set(
        xlabel = 'year',
        ylabel = 'price',
        title = f'Dow versus Gold'
    )
    axis.plot(dow_year, dow_price, label='dow', color='blue')
    axis.plot(gold_year, gold_price, label='gold', color='orange')
    axis.set_yscale('log')
    axis.yaxis.set_major_formatter(
        ticker.FuncFormatter(lambda v, p: Quantity(v).render())
    )
    axis.legend()
    if display_results:
        plt.show()
    else:
        plt.savefig('price.svg')


# generate graph of price normalized to gold {{{2
if show_in_gold:
    figure = plt.figure()
    axis = figure.add_subplot(111)
    axis.set(
        xlabel = 'year',
        ylabel = 'ratio',
        title = f'Dow normalied to Gold ({ratio_year[0]} â€” {ratio_year[-1]})'
    )
    axis.plot(ratio_year, ratio_price, label='dow/gold', color='green')
    axis.plot(ratio_year, best_fit, label=f'{rate:.2%} growth (best fit)', color='blue')

    axis.set_yscale('log')
    axis.yaxis.set_major_formatter(ticker.FuncFormatter(lambda y, _: '{:g}'.format(y)))
    axis.legend()
    if display_results:
        plt.show()
    else:
        plt.savefig('ratio.svg')
